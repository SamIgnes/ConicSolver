# ADMM solver
# ------------------------------------------------------------------------------

function admm_socp(prob::SOCP; ρ=1.0, max_iter=10000,rtol=1e-4, atol=1e-4, verbose=true)
    """
     admm_socp(prob::SOCP; ρ = 1.0, max_iter = 10_000,
       rtol = 1e-4, atol = 1e-4, verbose = true)
        Solves `prob` with ADMM and returns `(x, history)`.
        `history` is a Dict with primal/dual residual norms for plotting / inspection.
    """


    # unpack problem
    c, A, b, Soc, Rsoc, Ineq  = prob.c, prob.A, prob.b, prob.Soc, prob.Rsoc, prob.Ineq

    n = length(c)
    m = size(A, 1)

    # precompute KKT factorisation for the x‑subproblem
    K = [ρ*Matrix{Float64}(I, n, n)  A'; 
         A                          zeros(m, m)]
    F = lu(K)      # factor once

    # initialise variables
    x = zeros(n);  z = copy(x);  u = zeros(n)

    # iteration history
    hist = Dict(:r_norm=>Float64[], :s_norm=>Float64[])


    for k in 1:max_iter
        # ----- 1. x‑update (quadratic + equality) -----------------------------
        rhs = vcat(ρ*(z - u) - c, b)
        sol = F \ rhs
        x   = sol[1:n]

        # ----- 2. z‑update (projection onto K) -------------------------------
        v = x + u
        z_old = copy(z) 
        z = projSOCP(v, Soc, Rsoc, Ineq)

        # ----- 3. dual update -----------------------------------------------
        u += x - z

        # ----- diagnostics ---------------------------------------------------
        r_norm = norm(x - z)                  # primal residual
        s_norm = ρ * norm(z - z_old)      # dual residual (simplifies)
        push!(hist[:r_norm], r_norm)
        push!(hist[:s_norm], s_norm)

        eps_pri = sqrt(n)*atol + rtol*max(norm(x), norm(z))
        eps_du  = sqrt(n)*atol + rtol*norm(ρ*u)


        if verbose && k % 100 == 0
            @info "iter $k  r = $(round(r_norm, sigdigits=3))  " *
                  "s = $(round(s_norm, sigdigits=3))"
        end
        if r_norm ≤ eps_pri && s_norm ≤ eps_du
            verbose && @info "Converged in $k iterations"
            return x, hist
        end
    end
    @warn "ADMM reached max_iter = $max_iter without convergence"
    return z, hist
end