using LinearAlgebra
using Plots
using TickTock
using BenchmarkTools
using SparseArrays

include("FunctionsProjections")
include("ADMM Solver V2")

# Parametri
T = 10.0
N = 50
dt = T/N

# Numero variabili stato
nx = 2*(N+1)  # x_k, v_k
nu = N        # u_k

# Costruzione del problema lineare
# Variabili concatenano: [x_0..x_N, v_0..v_N, u_0..u_{N-1}]
n = nx + nu 

# Obiettivo: J = sum(u_k^2)
obj = zeros(n)
obj[nx+1:end] .= 0.0  # minimizziamo u_k^2 → implementiamo in ADMM come obj^T x ~0, useremo proiezione dinamica

# Vincoli dinamica Ax = g
# Matrice di uguaglianza
F = zeros(2*N+4, n)
# F = zeros(2*N+5, n)

for k in 1:N
    # x_{k+1} - x_k - dt*v_k = 0
    F[k, k] = -1
    F[k, k+1] = 1
    F[k, N+1+k] = -dt  # v_k

    # v_{k+1} - v_k - dt*u_k = 0
    F[N+k, N+1+k] = -1      # v_k
    F[N+k, N+1+k+1] = 1          # v_{k+1}
    F[N+k, nx+k] = -dt         # u_k
end

# Vincoli finali
xT_idx = N+1
vT_idx = 2*(N+1)
F[2*N+1, xT_idx] = 1.0   # x_N = 5
F[2*N+2, vT_idx] = 1.0   # v_N = 0

xI_idx = 1
vI_idx = N+2
F[2*N+3, xI_idx] = 1.0   # x_N = 5
F[2*N+4, vI_idx] = 1.0   # v_N = 0

# F[2*N+5, n] = 1.0   # v_N = 0

# g = vcat(zeros(2*N),[5.0, 0.0, 0.0, 0.0, 0.0])  # condizioni iniziali e finali
g = vcat(zeros(2*N),[5.0, 0.0, 0.0, 0.0])  # condizioni iniziali e finali
# In ADMM potremmo gestire condizioni finali come vincoli aggiuntivi
# oppure aggiungere penalità quadratica nell'obiettivo

# Punto iniziale
x0 = zeros(n)

# Nessun cono
    Soc = SOC([collect([nx+k]) for k in 1:(nu)],
    [], 0.21.*ones(nu)  )
    # Soc = SOC([], [], [])

# ADMM
ρ = 1.0
max_iter = 500
tol = 1e-6

Ind_A = [[nx+k] for k in 1:nu]
append!(Ind_A, [[nx+k] for k in 1:nu])
Coeff_A = [[1.0]  for k in 1:nu]
append!(Coeff_A, [1.0] for k in 1:nu)
rhs = vcat(-0.2.*ones(nu), 0.2*ones(nu))

display(typeof(Coeff_A))
display(typeof(Ind_A))
display(typeof(rhs))

Ineq = INEQ([],[], [],[],Ind_A, Coeff_A, rhs)


H = zeros(n,n)
H[nx+1:nx+nu, nx+1:nx+nu] = dt*I(N)   # peso integrale u_k^2


@btime x_sol, z_sol = admm_socp(x0, Soc, obj, H, F=F, g=g, Ineq=Ineq, ρ=ρ, max_iter=max_iter, tol=tol)


x_vals = x_sol[1:N+1]  # posizioni x_k
v_vals = x_sol[N+2:2*(N+1)]  # velocità v_k
u_vals = x_sol[nx+1:nx+nu]  # forze u_k

# Plot
t = 0:dt:T

p2 = plot(t[1:end], x_vals, xlabel="Time [s]", ylabel="Position x", title="Profilo della posizione ottima", legend=false)
p3 = plot(t[1:end],v_vals, xlabel="Time [s]", ylabel="veloity v", title="Profilo della velocità ottima", legend=false)
p4 = plot(t[2:end], u_vals, xlabel="Time [s]", ylabel="Force u", title="Profilo della forza ottima", legend=false)

plot( p2, p3, p4, layout=(3,1), size=(700,1000))
